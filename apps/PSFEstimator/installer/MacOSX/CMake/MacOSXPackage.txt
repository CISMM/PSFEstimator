# Qt frameworks
SET( QT_FRAMEWORKS
  Qt3Support
#  QtAssistant
  QtCore
  QtDBus
  QtGui
  QtHelp
  QtNetwork
  QtOpenGL
  QtScript
  QtScriptTools
  QtSql
  QtSvg
  QtWebKit
  QtXml
  QtXMLPatterns
  phonon
)

FOREACH( FRAMEWORK ${QT_FRAMEWORKS} )
  INSTALL( FILES
    "${QT_LIBRARY_DIR}/${FRAMEWORK}.framework/Versions/4/${FRAMEWORK}"
    DESTINATION ../Frameworks/${FRAMEWORK}.framework/Versions/4/
  )
ENDFOREACH( FRAMEWORK )

# Miscellaneous Qt resources.
INSTALL( DIRECTORY
  "${QT_LIBRARY_DIR}/QtGui.framework/Resources/qt_menu.nib"
  DESTINATION ../Frameworks/QtGui.framework/Resources/
)

# Include all imageformat plugins from Qt.
FILE( GLOB QT_IMAGEFORMAT_PLUGINS "/Developer/Applications/Qt/plugins/imageformats/*.dylib" )
FOREACH( PLUGIN ${QT_IMAGEFORMAT_PLUGINS} )
  INSTALL( FILES
    "${PLUGIN}"
    DESTINATION ../PlugIns/imageformats
  )
ENDFOREACH( PLUGIN )

INSTALL( FILES
  "${PSFEstimator_SOURCE_DIR}/apps/PSFEstimator/installer/MacOSX/qt.conf"
  DESTINATION ./
)

# Include all dynamic libraries from VTK.
FILE( GLOB VTK_LIBRARIES ${VTK_DIR}/lib/*.dylib )
IF ( NOT VTK_LIBRARIES )
  MESSAGE( WARNING "Could not find VTK libraries. Installer will be invalid!" )
ENDIF()
FOREACH( LIBRARY ${VTK_LIBRARIES} )
  INSTALL( FILES
     "${LIBRARY}"
     DESTINATION lib
  )
ENDFOREACH( LIBRARY )

# Include all dynamic libraries from ITK.
FILE (GLOB ITK_LIBRARIES ${ITK_DIR}/lib/*.dylib )
IF ( NOT ITK_LIBRARIES )
  MESSAGE( WARNING "Could not find ITK libraries. Installer will be invalid!" )
ENDIF()
FOREACH( LIBRARY ${ITK_LIBRARIES} )
  INSTALL( FILES
    "${LIBRARY}"
    DESTINATION lib
  )
ENDFOREACH( LIBRARY )

# This is a GPL library dependency. Newer versions of VTK should not have this dependency,
# so remove this in the future.
#FILE( GLOB HISTORY_LIBS /usr/local/lib/libhistory*.dylib )
#FOREACH( LIBRARY ${HISTORY_LIBS} )
#  INSTALL( FILES
#    "${LIBRARY}"
#    DESTINATION lib
#  )
#ENDFOREACH( LIBRARY )


SET( USER_GUIDE_FILE "${PSFEstimator_BINARY_DIR}/docs/PSFEstimator-${PSFEstimator_VERSION_STRING}-UserGuide.pdf" )
IF ( EXISTS "${USER_GUIDE_FILE}" )
  INSTALL( FILES "${PSFEstimator_BINARY_DIR}/docs/PSFEstimator-${PSFEstimator_VERSION_STRING}-UserGuide.pdf"
    DESTINATION "../../../" )
ELSE ( EXISTS "${USER_GUIDE_FILE}" )
  MESSAGE( WARNING "Could not find the user guide PDF file. Please generate it by running LaTeX on ${PSFEstimator_BINARY_DIR}/docs/PSFEstimator-${PSFEstimator_VERSION_STRING}-UserGuide.tex" )
ENDIF ( EXISTS "${USER_GUIDE_FILE}" )


SET( CPACK_GENERATOR "Bundle" )
SET( CPACK_BUNDLE_PLIST "${PSFEstimator_BINARY_DIR}/apps/PSFEstimator/installer/MacOSX/Info.plist" )
SET( PSFEstimator_PROGRAM_NAME_WITH_VERSION "PSFEstimator ${PSFEstimator_VERSION_STRING}" )
CONFIGURE_FILE( "${PSFEstimator_SOURCE_DIR}/apps/PSFEstimator/installer/MacOSX/Info.plist" 
  "${CPACK_BUNDLE_PLIST}" )
SET( CPACK_BUNDLE_STARTUP_COMMAND "PSFEstimator" )
SET( CPACK_BUNDLE_ICON "${PSFEstimator_SOURCE_DIR}/apps/PSFEstimator/installer/MacOSX/PSFEstimator.icns" )
SET( CPACK_BUNDLE_STARTUP_COMMAND "${PSFEstimator_SOURCE_DIR}/apps/PSFEstimator/installer/MacOSX/startup.sh" )
SET( CPACK_BUNDLE_NAME "PSFEstimator ${PSFEstimator_VERSION_STRING}" )

SET( CPACK_PACKAGE_ICON "${PSFEstimator_SOURCE_DIR}/apps/PSFEstimator/installer/MacOSX/PSFEstimator.icns" )
